{"version":3,"sources":["inflicted.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pomodoro","props","sessionID","breakID","state","session","break","sessionSec","breakSec","sessionRecord","BreakRecord","sessionActive","breakActive","activityType","startTimer","bind","intervalSess","intervalBreak","sessInc","sessDec","breaInc","breaDec","reset","playAlert","pauseAlert","this","setState","document","getElementById","play","pause","clearInterval","setInterval","console","log","currentTime","formatMinSM","formatSecSM","formatMinS","Math","floor","formatSecS","formatMinBM","formatSecBM","formatMinB","formatSecB","displaySOrB","id","className","onClick","src","notifysound","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b319ef9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/inflicted.2d55e753.mp3\";","import React, { Component } from 'react';\n// eslint-disable-next-line\nimport { Provider, connect } from 'react-redux';\n// eslint-disable-next-line\nimport { store } from 'redux';\nimport \"./App.css\";\nimport notifysound from \"./inflicted.mp3\";\n\nclass Pomodoro extends Component {\n  constructor(props) {\n    super(props)\n      this.sessionID = null;\n      this.breakID = null;\n      this.state = {\n      session: 25,\n      break: 5,\n      sessionSec: null,\n      breakSec: null,\n      sessionRecord: null,\n      BreakRecord: null,\n      sessionActive: true,\n      breakActive: false,\n      activityType: \"Session\"\n    };\n  \n  this.startTimer = this.startTimer.bind(this);\n  this.intervalSess = this.intervalSess.bind(this);\n  this.intervalBreak = this.intervalBreak.bind(this);\n  this.sessInc = this.sessInc.bind(this);\n  this.sessDec = this.sessDec.bind(this);\n  this.breaInc = this.breaInc.bind(this);\n  this.breaDec = this.breaDec.bind(this);\n  this.reset = this.reset.bind(this);\n  this.playAlert = this.playAlert.bind(this);\n  this.pauseAlert = this.pauseAlert.bind(this);\n  };\n\n componentDidMount(){\n    this.setState({\n      sessionSec: this.state.session * 60,\n      breakSec: this.state.break * 60,\n      sessionRecord: this.state.session * 60,\n      BreakRecord: this.state.break * 60,\n    })\n  };\n\n  playAlert(){\n    document.getElementById(\"beep\").play();\n    \n  };\n\n  pauseAlert() {\n    document.getElementById(\"beep\").pause();\n    \n  };\n\n  sessInc(){\n    if(this.state.session < 60 ){\n      this.setState ({\n        session: this.state.session + 1,\n        sessionSec: this.state.sessionSec + 60,\n        sessionRecord: this.state.sessionRecord + 60,\n      });\n\n    };\n  };\n\n  sessDec(){\n    if(this.state.session > 1) {\n      this.setState({\n        session: this.state.session - 1,\n        sessionSec: this.state.sessionSec - 60,\n        sessionRecord: this.state.sessionRecord - 60, \n      });\n    };\n  };\n  \n  breaInc(){\n    if(this.state.break < 60 ){\n      this.setState ({\n        break: this.state.break + 1,\n        breakSec: this.state.breakSec + 60,\n        BreakRecord: this.state.BreakRecord + 60, \n      });\n    };\n  };\n\n  breaDec(){\n    if(this.state.break > 1) {\n      this.setState({\n        break: this.state.break - 1,\n        breakSec: this.state.breakSec - 60,\n        BreakRecord: this.state.BreakRecord - 60, \n      });\n    };\n  };\n\n  intervalSess() {\n      if(this.state.sessionSec > 0){\n        this.setState({\n          sessionSec: this.state.sessionSec - 1\n      });\n      }else if(this.state.sessionSec === 0) {\n        this.setState({\n          sessionActive: false,\n          breakActive: true,\n          activityType: \"Break\",\n          breakSec: this.state.BreakRecord,\n        });\n        clearInterval(this.sessionID); // stops interval\n        this.breakID = null;\n        this.playAlert();\n        this.startTimer (); \n      }\n  };\n\n  intervalBreak () {\n    if(this.state.breakSec > 0){\n      this.setState({\n        breakSec: this.state.breakSec - 1\n      });\n      }else if(this.state.sessionSec === 0){\n        this.setState({\n          breakActive: false,\n          sessionActive: true,\n          activityType: \"Session\",\n          sessionSec: this.state.sessionRecord,\n        });\n        clearInterval(this.breakID);\n        this.sessionID = null;\n        this.playAlert();\n        this.startTimer ();\n      }\n  };\n\n\n  startTimer() {\n    if(this.sessionID === null && this.state.sessionActive === true) { // # 1 Sess starting - first time\n      this.setState({\n        sessionRecord: this.state.sessionSec\n      });\n      this.sessionID = setInterval(this.intervalSess,1000);\n      console.log(\"sessionID === null\",this.sessionID === null,\"Sess Started\");\n\n    }else if(this.sessionID !== null && this.state.sessionActive === true) { // # 2 Sess is paused\n      console.log(\"sessionID === null \",this.sessionID === null,\"Sess paused\");\n      clearInterval(this.sessionID);\n      this.sessionID = null;\n    }else if(this.breakID === null && this.state.breakActive === true) { //  # 3 Break starting for first time\n      this.breakID = setInterval(this.intervalBreak,1000);\n      \n      console.log(\"BreakID === null\",this.breakID === null,\"Break started\");\n    }else if(this.breakID !== null && this.state.breakActive === true){ // #4 Break pased\n      clearInterval(this.breakID);\n      this.breakID = null;\n      console.log(\"BreakID === null\",this.breakID ===null,\"Break Paused\");\n    }\n\n  };\n\n  reset(){\n    clearInterval(this.sessionID);\n    clearInterval(this.breakID);\n    this.sessionID = null;\n    this.breakID = null;\n    this.pauseAlert();\n    document.getElementById(\"beep\").currentTime = 0;\n    this.setState({\n      session: 25,\n      break: 5,\n      sessionSec: 1500,\n      breakSec: 300,\n      sessionRecord: 1500,\n      BreakRecord: 300,\n      sessionActive: true,\n      breakActive: false,\n      activityType: \"Session\",\n    });\n  };\n  \n  render(){\n    let formatMinS = Math.floor(this.state.sessionSec /60);\n    let formatSecS = this.state.sessionSec - (formatMinS * 60);\n    let formatMinSM;\n    let formatSecSM;\n    (formatMinS >= 10) ? formatMinSM = formatMinS : formatMinSM = \"0\" + formatMinS;\n    (formatSecS >= 10) ? formatSecSM = formatSecS : formatSecSM = \"0\" + formatSecS;\n    \n  \n    let formatMinB = Math.floor(this.state.breakSec / 60);\n    let formatSecB = this.state.breakSec - (formatMinB * 60);\n    let formatMinBM;\n    let formatSecBM;\n    (formatMinB >= 10) ? formatMinBM = formatMinB: formatMinBM = \"0\" + formatMinB;\n    (formatSecB >= 10) ? formatSecBM = formatSecB : formatSecBM = \"0\" + formatSecB;\n    \n    let displaySOrB = (this.state.sessionActive === true) ? formatMinSM + \":\" + formatSecSM : formatMinBM + \":\" + formatSecBM;\n\n    return(\n      <div id=\"main\">\n        <div id=\"left\">\n          <button className=\"buttons left-buttons\" id=\"start_stop\" onClick={this.startTimer}>Start/Stop</button>\n          <div id=\"timer-label\">{this.state.activityType}</div>\n          <button className=\"buttons left-buttons\" id=\"reset\" onClick={this.reset}>Reset</button>\n        </div>\n        <div id=\"right\">\n          <div id=\"time-left\">{displaySOrB}</div>\n          <div className=\"right-bottom\">\n            <div id=\"session_adjust\">\n            <div id=\"session-label\">Session Length</div>\n              <button className=\"buttons right-buttons\" id=\"session-decrement\" onClick={this.sessDec}>-</button>\n              <button className=\"buttons right-buttons\" id=\"session-increment\" onClick={this.sessInc}>+</button>\n              <div id=\"session-length\">{this.state.session}</div>\n            </div>\n            <div id=\"break_adjust\">\n              <div id=\"break-label\">Break Length</div>\n              \n              <button className=\"buttons right-buttons\" id=\"break-decrement\" onClick={this.breaDec}>-</button>\n              <button className=\"buttons right-buttons\" id=\"break-increment\" onClick={this.breaInc}>+</button>\n              <div id=\"break-length\">{this.state.break}</div>\n            </div>\n          </div>\n          </div>\n        <audio id=\"beep\" src={notifysound}></audio>\n      </div>\n    )\n  }\n};\n\nexport default Pomodoro;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}